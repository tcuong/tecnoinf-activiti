<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"

	xsi:schemaLocation="
        	http://www.springframework.org/schema/beans 
        	http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
            http://www.springframework.org/schema/context 
			http://www.springframework.org/schema/context/spring-context-3.1.xsd
			http://www.springframework.org/schema/tx 
            http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
			http://www.springframework.org/schema/data/jpa 
			http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">

	<context:property-placeholder location="classpath*:mail.properties, classpath*:jdbc.properties" />

	<import resource="classpath*:*applicationContextCommon.xml" />
	<import resource="classpath*:applicationContextCore.xml" />
	<import resource="classpath*:activiti.cfg.xml" />

	<!-- Scan this classpath for annotated components that will be auto-registered as Spring beans -->
	<context:annotation-config />

	<bean
		class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />

	<!-- Automatically translate hibernate/jpa exceptions into Spring's generic 
		DataAccessException hierarchy for those classes annotated with Repository -->
	<bean
		class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />

	<!-- JPA Entity Manager Factory -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter" />
		<property name="packagesToScan">
			<list>
				<value>edu.bedelias.*</value>
			</list>
		</property>
		<property name="jpaProperties">
			<props>
				<!-- set HibernateJpaVendorAdapter's behavior: 'create' = build a new 
					database on each run; 'update' = modify an existing database; 'create-drop' 
					= 'create' and also drops tables when Hibernate closes; 'validate' = makes 
					no changes to the database -->
				<prop key="hibernate.hbm2ddl.auto">create</prop>
			</props>
		</property>
	</bean>

	<bean id="hibernateJpaVendorAdapter"
		class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
		<property name="showSql" value="true" />
		<property name="generateDdl" value="false" />
		<property name="databasePlatform" value="org.hibernate.dialect.MySQLDialect" />
	</bean>

	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${jdbc.driverClass}" />
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}" />
		<property name="user" value="${jdbc.user}" />
		<property name="password" value="${jdbc.password}" />
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}" />
		<property name="maxStatements" value="${jdbc.maxStatements}" />
		<property name="minPoolSize" value="${jdbc.minPoolSize}" />
	</bean>

	<!-- Enable the configuration of transactional behavior based on annotations -->
	<tx:annotation-driven />

	<!-- Transaction Manager is defined -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="inscripcionService"
		class="org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean">
		<property name="serviceUrl"
			value="http://localhost:8080/bedelias-web/remote/InscripcionService" />
		<property name="serviceInterface" value="edu.bedelias.services.InscripcionService" />
	</bean>

	<bean id="evaluacionService"
		class="org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean">
		<property name="serviceUrl"
			value="http://localhost:8080/bedelias-web/remote/EvaluacionService" />
		<property name="serviceInterface" value="edu.bedelias.services.EvaluacionService" />
	</bean>
	
		<bean id="carreerService"
		class="org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean">
		<property name="serviceUrl"
			value="http://localhost:8080/bedelias-web/remote/CarreerService" />
		<property name="serviceInterface" value="edu.bedelias.services.CarreerService" />
	</bean>
	
	<bean id="materiaService"
		class="org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean">
		<property name="serviceUrl"
			value="http://localhost:8080/bedelias-web/remote/MateriaService" />
		<property name="serviceInterface" value="edu.bedelias.services.MateriaService" />
	</bean>
	
	<bean id="studentService"
		class="org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean">
		<property name="serviceUrl"
			value="http://localhost:8080/bedelias-web/remote/StudentService" />
		<property name="serviceInterface" value="edu.bedelias.services.StudentService" />
	</bean>
	
</beans>